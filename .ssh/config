# Sample ssh config

# Default to keep alive
Host *
    ServerAliveInterval 60
    ServerAliveCountMax 60
    TCPKeepAlive yes
    #HashKnownHosts no

Host *dlami*
    User ec2-user


################################################################################
# Port-forwarding
################################################################################
# Port forwardings (https://mpharrigan.com/2016/05/17/background-ssh.html):
# - Setup forwarding (1x)  : ssh -fN fwd-dlamiX
# - Normal ssh session     : ssh dlamiX
# - Check tunnels          : ssh -TO check cp-dlamiX
# - Close tunnels          : ssh -TO exit cp-dlamiX
#
# For alternative method, see also:
# - https://stackoverflow.com/questions/2241063/bash-script-to-set-up-a-temporary-ssh-tunnel/15198031#15198031
# - https://mpharrigan.com/2016/05/17/background-ssh.html
# - https://www.greenend.org.uk/rjk/sshfwd/
Host cp-dl* fwd-dl*
    ControlPath ~/.ssh/%h.ctl
    RequestTTY no

Host fwd-dl*
    ExitOnForwardFailure yes
    ControlPersist yes
    ControlMaster yes
    LocalForward 8888 localhost:8888
    LocalForward 8443 localhost:8443

# sample 'hostname' stanza
# Open a 'normal' ssh session using: ssh dlamic
Host dlamic fwd-dlamic cp-dlamic
    HostName a.b.c.d
    IdentityFile ~/path/to/keyfile.pem
    # For ec2 without EIP
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null
    #LogLevel ERROR


################################################################################
# VSCode Windows: remote ssh directly to target
################################################################################
Host wtarget target
    HostName a.b.c.d
    User haha
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null

    # NOTE: always modify the HostName according to actual target hostname.
    # Vscode windows can't use ProxyCommand (even though sed.exe is installed).
    # From its log, it does its own thing and generate its own ssh connect command,
    # ignoring our ProxyCommand (ref: DEPRECATED stanza).
    HostName i.j.k.l

Host wtarget
    # VSCode (Windows) needs Windows path. Even when I "connect to remote host" from the VSCode
    # GUI window connected to WSL2 Linux, it's the VSCode Windows that opens the ssh connection
    # to the remote ssh host, hence looking for private key in the Windows filesystem.
    IdentityFile C:\Users\vmarch\Documents\.ssh\keyfile

Host target
    IdentityFile ~/.ssh/keyfile

# [DEPRECATED] This works for Linux only. VSCode Windows as it ignores ProxyCommand and instead
# generates its own ssh command (and will still use %h). So, it's easier to just "hardcode" the
# hostname (like the previous stanzas).
#
# [STANZA KEPT HERE FOR HISTORICAL REASON ONLY]
Host target-*
    # Use this from the terminal under WSL2 Linux (including the integrated terminal from a VSCode
    # GUI window connected to WSL2 Linux.
    IdentityFile ~/.ssh/keyfile

    # We need ProxyCommand to dynamically determine the target's actual host name.
    # Basically, given %h=<prefix>-gpu001, do ssh gpu001
    ProxyCommand ssh -W $(echo %h | sed 's/^target-//'):22 headnode-hackathon


################################################################################
# VSCode Windows: remote ssh via jumphost
################################################################################
Host jumphost
    HostName a.b.c.d
    User haha
    IdentityFile ~/path/to/keyfile
    IdentitiesOnly yes
    ForwardAgent yes

Host wtarget target
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null
    User hehe

    # NOTE: always modify the HostName according to actual target hostname.
    # Vscode windows can't use ProxyCommand (even though sed.exe is installed).
    # From its log, it does its own thing and generate its own ssh connect command,
    # ignoring our ProxyCommand (ref: DEPRECATED stanza).
    ProxyJump headnode
    HostName i.j.k.l

Host wtarget
    # VSCode (Windows) needs Windows path. Even when I "connect to remote host" from the VSCode
    # GUI window connected to WSL2 Linux, it's the VSCode Windows that opens the ssh connection
    # to the remote ssh host, hence looking for private key in the Windows filesystem.
    IdentityFile C:\Users\vmarch\Documents\.ssh\keyfile

Host target
    IdentityFile ~/.ssh/keyfile

# [DEPRECATED] This works for Linux only. VSCode Windows as it ignores ProxyCommand and instead
# generates its own ssh command (and will still use %h). So, it's easier to just "hardcode" the
# hostname (like the previous stanzas).
#
# [STANZA KEPT HERE FOR HISTORICAL REASON ONLY]
Host target-*
    # Use this from the terminal under WSL2 Linux (including the integrated terminal from a VSCode
    # GUI window connected to WSL2 Linux.
    IdentityFile ~/.ssh/keyfile

    # Can't use ProxyJump <JUMP_HOST> because it conflicts with ProxyCommand.
    #
    # We need ProxyCommand to dynamically determine the target's actual host name.
    # Basically, given %h=<prefix>-gpu001, do ssh gpu001
    ProxyCommand ssh -W $(echo %h | sed 's/^target-//'):22 headnode-hackathon
