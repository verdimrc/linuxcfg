################################################################################

# github access token: ~~~~....~~~~....~~~~....~~~~....~~~~....

# Then, use git's credential helper
# https://help.github.com/articles/caching-your-github-password-in-git/#platform-linux
git config --global credential.helper 'cache --timeout=3600'

################################################################################

# Check latest release

# Bash function
get_latest_release() {
    curl --silent \
        "https://api.github.com/repos/$1/releases/latest" \
        | jq -r '.tag_name'
}

# Usage: get_latest_release ClementTsang/bottom

################################################################################

# git fetch --all to ignore MY_REMOTE
git config remote.MY_REMOTE.skipDefaultUpdate true

################################################################################

# Descriptive branch
git branch lr
git branch --edit-description
git config branch.lr.description

################################################################################

# Lean clone
git clone --single-branch -b main --depth 1 https://github.com/huggingface/transformers

# Lean clone a specific commit hash
# https://stackoverflow.com/a/76203717
# Set those variables:
repourl='https://github.com/NVIDIA/NeMo.git'
commit=cbd671baa47995ac5b61060200bc4ed7ea71b3ee
# : ${repourl:?}
git init -- nemo
cd -- nemo
git remote add origin "${repourl:?}"
git fetch -q --depth=1 origin "${commit:?}"
git reset --hard FETCH_HEAD

################################################################################

# Squash commits and retain the latest timestamp

# Get latest timestamp
git show -s --pretty=tformat:%ai 41998a6
2019-05-17 14:14:53 +0800

# Squash
git rebase -i HEAD~3
#git rebase -i -root  # <-- use this when squashing all the way to the 1st commit
#pick ...
#squash ...
#squash ...

# Update the new commit (which default the oldest timestamp) to the latest one
git commit --amend --date="2019-05-17 14:14:53 +0800"

################################################################################

# Show change history of a specific file
git log --follow -p -- filename

################################################################################

# Compact repo
git filter-branch --tag-name-filter cat --index-filter 'git rm -r --cached --ignore-unmatch filename' --prune-empty -f -- --all
git gc --prune=now
git gc --aggressive --prune=now

################################################################################

# Sync local, forked repo, and upstream.
# Based on http://stackoverflow.com/a/19506355
# - Alternative approaches: http://stackoverflow.com/questions/7244321/how-to-update-github-forked-repository

# List the current remotes
$ git remote -v
origin  https://github.com/user/repo.git (fetch)
origin  https://github.com/user/repo.git (push)

# Set a new remote
$ git remote add upstream https://github.com/otheruser/repo.git

# Example of ssh remote
$ git remote add ec2 https://hostname/home/ubuntu/repo

# Verify new remote
$ git remote -v
origin    https://github.com/user/repo.git (fetch)
origin    https://github.com/user/repo.git (push)
upstream  https://github.com/otheruser/repo.git (fetch)
upstream  https://github.com/otheruser/repo.git (push)

$ git fetch upstream

# List all local and remote-tracking branches
$ git branch -va
* master                  a422352 My local commit
  remotes/origin/HEAD     -> origin/master
  remotes/origin/master   a422352 My local commit
  remotes/upstream/master 5fdff0f Some upstream commit

# Sync local's master from upstream's master
$ git checkout master
$ git merge upstream/master

# Sync local's master to forked repo's master
$ git push origin master

################################################################################

# How to make a parent repo's branch to track a submodule's branch

git clone PARENT_REPO
cd REPO_DIR
git branch marcverd
git checkout marcverd

# Have submodule to track a particular branch
git config -f .gitmodules submodule.SUBREPO_NAME.branch BRANCH_NAME
# Will add to .gitmodules "branch = BRANCH_NAME" under section [submodule "SUBREPO_NAME"]

# Really pull-down latest states from remote SUBREPO_NAME:BRANCH_NAME.
git submodule update --init --remote

# Commit the changes: both the submodule config and the head pointers
git add .gitmodules Mlmax/
git commit

# Push local branch to remote branch, and track.
git push -u origin marcverd

# Switch branch and update local copy of submodule
git checkout --recurse-submodules <NEW_BRANCH>

################################################################################

# How to mirror between one repo to another:
# - https://www.opentechguides.com/how-to/article/git/177/git-sync-repos.html
# - http://blog.plataformatec.com.br/2013/05/how-to-properly-mirror-a-git-repository/

################################################################################

# Remove refs
git branch -vva
git update-ref -d refs/remotes/origin/branch_name

################################################################################

# Workaround to prevent git client to push to remote
# https://stackoverflow.com/a/10260389
git remote set-url --push origin no_push
